# -*- coding: utf-8 -*-
"""prétraitement_des_données

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dyrYX_-ZU6ZB_I5CjuDpvlESrlMPL89x
"""

import types
import pandas as pd
data=pd.read_csv("STEG_BILLING_HISTORY.csv")
client_O_bills=data.iloc[0:10,]
print("les dix premiers lignes de la variable client_O_bills sont:")
print(client_O_bills)

#le type de données de la variable 'client_0_bills'
print(type(client_O_bills))

#Affichez les informations générales du jeu de données
print("les informations générales du jeu de données sont:")
data.info()

#Le nombre de lignes
print("Le nombre de lignes est égal à:",data.shape[0])
#le nombre de colonnes
print("Le nombre de colonnes est égal à:",data.shape[1])

#les caractéristiques catégorielles présentes dans l’ensemble de données
cat_categorielles=data.select_dtypes(include=["object"])
print("le nombre de categories categorielles est:",len(cat_categorielles))

#l'espace memoire consommé par l'ensemble de données
print("L'espace occupé:",data.memory_usage().sum(), "octets")

#Inspection de l’ensemble de données pour détecter d’éventuelles valeurs manquantes.
print(data.isnull().sum())

#Sélectionnez votre stratégie pour gérer les valeurs manquantes et dites-nous pourquoi vous avez fait ce choix.
print("Colonnes avec des valeurs manquantes :")
print(data.isnull().sum()[data.isnull().sum()> 0])
#On utilise la moyenne pour gérer les valeurs manquantes car elles sont de categorie numériques
data.fillna(data.mean(), inplace=True)

#Exécutez une analyse descriptive sur les caractéristiques numériques (colonnes).
val_num = data.select_dtypes(include=['number'])
print(val_num.describe())

#selection des enregistrements de factures du client avec un identifiant ='train_Client_0'
#première méthode:
train_Client_0_m1=data.loc[data['client_id']=="train_Client_0"]
print(train_Client_0_m1)
#deuxième méthode:
train_Client_0_m2=data.query('client_id=="train_Client_0"')
print(train_Client_0_m2)

#Transformez la fonctionnalité 'counter_type' en variable numérique à l'aide de l'encodeur de votre choix
from sklearn.preprocessing import LabelEncoder

# Créer une instance de LabelEncoder
label_encoder = LabelEncoder()

# Appliquer l'encodage à la colonne 'counter_type'
data['counter_type_encoded'] = label_encoder.fit_transform(data['counter_type'])

# Suppression de la fonctionnalité 'counter_statue' du Dataframe
data.drop('counter_statue', axis=1, inplace=True)
print(f"new ={data}")